'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import ThemeToggle from './components/ThemeToggle';

interface GamePayload {
  name: string;
  price: number;
  short_description: string;
  release_date: string;
  developers: string;
  genres: string;
  tags: string;
  steam_appid: string;
}

interface ApiGame {
  id: string;
  score: number;
  payload: GamePayload;
}

interface Game {
  id: string;
  name: string;
  price: number;
  short_description: string;
  release_date: string;
  developers: string;
  genres: string;
  tags: string;
  relevance?: number;
  imageUrl: string;
}

export default function Home() {
  const [games, setGames] = useState<Game[]>([]);
  const [likedGames, setLikedGames] = useState<Game[]>([]);
  const [dislikedGames, setDislikedGames] = useState<Game[]>([]);
  const [loading, setLoading] = useState(true);
  const [actionLoading, setActionLoading] = useState<{ [key: string]: boolean }>({});
  const [error, setError] = useState('');
  const [actionError, setActionError] = useState('');
  const [refreshing, setRefreshing] = useState(false);
  const [feedbackMessage, setFeedbackMessage] = useState<{message: string, type: 'success' | 'error' | ''}>({message: '', type: ''});
  // New state variables for collapsible sections
  const [heroExpanded, setHeroExpanded] = useState(true);
  const [likedGamesExpanded, setLikedGamesExpanded] = useState(true);
  const [dislikedGamesExpanded, setDislikedGamesExpanded] = useState(true);
  const [preferencesFullscreen, setPreferencesFullscreen] = useState(false);
  const [historyExpanded, setHistoryExpanded] = useState(true);
  // Add new state variables for resizable sidebar
  const [sidebarWidth, setSidebarWidth] = useState(0);
  const [isDragging, setIsDragging] = useState(false);
  const sidebarRef = useRef<HTMLDivElement>(null);
  // Add width tooltip display
  const [showWidthTooltip, setShowWidthTooltip] = useState(false);

  // Load liked and disliked games from local storage
  useEffect(() => {
    // Initialize the sidebar width to 15% of the window width
    setSidebarWidth(window.innerWidth * 0.15);
    
    const loadSavedGames = () => {
      try {
        const savedLikedGames = localStorage.getItem('likedGames');
        const savedDislikedGames = localStorage.getItem('dislikedGames');
        
        if (savedLikedGames) {
          setLikedGames(JSON.parse(savedLikedGames));
        }
        
        if (savedDislikedGames) {
          setDislikedGames(JSON.parse(savedDislikedGames));
        }
      } catch (err) {
        console.error('Error loading saved games:', err);
        // Continue without saved games if there's an error
      }
    };
    
    loadSavedGames();
    fetchRandomGames();
  }, []);

  // Save liked games to local storage whenever they change
  useEffect(() => {
    try {
      localStorage.setItem('likedGames', JSON.stringify(likedGames));
    } catch (err) {
      console.error('Error saving liked games:', err);
    }
  }, [likedGames]);

  // Save disliked games to local storage whenever they change
  useEffect(() => {
    try {
      localStorage.setItem('dislikedGames', JSON.stringify(dislikedGames));
    } catch (err) {
      console.error('Error saving disliked games:', err);
    }
  }, [dislikedGames]);

  // Fetch random games from the API
  const fetchRandomGames = async () => {
    setLoading(true);
    setError('');
    setRefreshing(true);
    
    try {
      const response = await fetch(`/api/py/random-games?limit=9`);
      
      if (!response.ok) {
        throw new Error(`Error: ${response.status} ${response.statusText}`);
      }
      
      const apiGames: ApiGame[] = await response.json();
      
      // Process the games
      const processedGames = processApiGames(apiGames);
      
      setGames(processedGames);
    } catch (err) {
      console.error('Error fetching random games:', err);
      setError(err instanceof Error ? err.message : String(err));
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  // Fetch game recommendations based on liked and disliked games
  const fetchRecommendations = async (liked: string[], disliked: string[]) => {
    setLoading(true);
    setError('');
    
    try {
      const payload = {
        liked_games: liked,
        disliked_games: disliked,
        limit: 9
      };
      
      const response = await fetch('/api/py/recommendations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });
      
      if (!response.ok) {
        throw new Error(`Error: ${response.status} ${response.statusText}`);
      }
      
      const apiGames: ApiGame[] = await response.json();
      
      // Process the games
      const processedGames = processApiGames(apiGames);
      
      setGames(processedGames);
    } catch (err) {
      console.error('Error fetching recommendations:', err);
      setActionError(err instanceof Error ? err.message : String(err));
      // If recommendations fail, fall back to random games
      fetchRandomGames();
    } finally {
      setLoading(false);
    }
  };

  // Handle liking a game
  const handleLike = async (game: Game) => {
    // Set loading state for this specific game
    setActionLoading(prev => ({ ...prev, [game.id]: true }));
    setActionError('');
    
    try {
      // Create new array to avoid mutation
      const newLikedGames = [...likedGames, game];
      
      // Update state in one go
      setLikedGames(newLikedGames);
      
      // Remove from current games display
      setGames(prevGames => prevGames.filter(g => g.id !== game.id));
      
      // Show feedback message
      setFeedbackMessage({
        message: "Liked! Finding similar games...",
        type: "success"
      });
      
      // Update recommendations based on new likes/dislikes
      await fetchRecommendations(
        newLikedGames.map(g => g.id), 
        dislikedGames.map(g => g.id)
      );
      
      // Clear feedback message after 3 seconds
      setTimeout(() => {
        setFeedbackMessage({message: '', type: ''});
      }, 3000);
      
    } catch (err) {
      console.error('Error liking game:', err);
      setActionError(err instanceof Error ? err.message : String(err));
    } finally {
      // Clear loading state for this game
      setActionLoading(prev => {
        const newState = { ...prev };
        delete newState[game.id];
        return newState;
      });
    }
  };

  // Handle disliking a game
  const handleDislike = async (game: Game) => {
    // Set loading state for this specific game
    setActionLoading(prev => ({ ...prev, [game.id]: true }));
    setActionError('');
    
    try {
      // Create new array to avoid mutation
      const newDislikedGames = [...dislikedGames, game];
      
      // Update state in one go
      setDislikedGames(newDislikedGames);
      
      // Remove from current games display
      setGames(prevGames => prevGames.filter(g => g.id !== game.id));
      
      // Show feedback message
      setFeedbackMessage({
        message: "Noted! We'll avoid similar titles.",
        type: "error"
      });
      
      // Update recommendations based on new likes/dislikes
      await fetchRecommendations(
        likedGames.map(g => g.id), 
        newDislikedGames.map(g => g.id)
      );
      
      // Clear feedback message after 3 seconds
      setTimeout(() => {
        setFeedbackMessage({message: '', type: ''});
      }, 3000);
      
    } catch (err) {
      console.error('Error disliking game:', err);
      setActionError(err instanceof Error ? err.message : String(err));
    } finally {
      // Clear loading state for this game
      setActionLoading(prev => {
        const newState = { ...prev };
        delete newState[game.id];
        return newState;
      });
    }
  };

  // Reset all history and start fresh
  const handleResetHistory = () => {
    setLikedGames([]);
    setDislikedGames([]);
    localStorage.removeItem('likedGames');
    localStorage.removeItem('dislikedGames');
    fetchRandomGames();
  };

  // Split comma-separated string into array
  const splitString = (str: string): string[] => {
    return str ? str.split(',').map(item => item.trim()).filter(Boolean) : [];
  };

  // Format price
  const formatPrice = (price: number): string => {
    return price === 0 ? 'Free to Play' : `$${price.toFixed(2)} USD`;
  };

  // Process API games into our internal format
  const processApiGames = (apiGames: ApiGame[]): Game[] => {
    return apiGames.map(apiGame => {
      // Clean up or enhance description
      const currentDesc = apiGame.payload.short_description;
      
      // Create an enhanced description if it's generic or missing
      let enhancedDesc = currentDesc;
      if (!currentDesc || currentDesc.startsWith(`A ${apiGame.payload.genres} game`)) {
        // Create a better description from the info we have
        const name = apiGame.payload.name;
        const genres = apiGame.payload.genres;
        
        // Handle tags safely
        const tagsArray = apiGame.payload.tags ? apiGame.payload.tags.split(',').map(tag => tag.trim()).slice(0, 5) : [];
        const tagsStr = tagsArray.join(', ');
        
        const developers = apiGame.payload.developers || 'an indie studio';
        
        enhancedDesc = `${name} is a ${genres} game. ` + 
                       `It features ${tagsStr} gameplay elements. ` +
                       `Developed by ${developers}.`;
                       
        console.log("Enhanced description:", enhancedDesc);
      }
      
      return {
        id: apiGame.id,
        name: apiGame.payload.name,
        price: apiGame.payload.price,
        short_description: enhancedDesc,
        release_date: apiGame.payload.release_date,
        developers: apiGame.payload.developers,
        genres: apiGame.payload.genres,
        tags: apiGame.payload.tags,
        relevance: apiGame.score,
        // Construct Steam store image URL using the appid
        imageUrl: `https://cdn.cloudflare.steamstatic.com/steam/apps/${apiGame.payload.steam_appid}/header.jpg`
      };
    });
  };

  // Function to check if a game was released in the last 30 days
  const isNewRelease = (dateString: string): boolean => {
    if (!dateString) return false;
    const releaseDate = new Date(dateString);
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    return releaseDate >= thirtyDaysAgo;
  };

  // Handle removing a game from liked games list
  const handleRemoveFromLiked = (game: Game) => {
    setLikedGames(prev => prev.filter(g => g.id !== game.id));
  };

  // Handle removing a game from disliked games list
  const handleRemoveFromDisliked = (game: Game) => {
    setDislikedGames(prev => prev.filter(g => g.id !== game.id));
  };

  // Add resize handling functions
  const handleMouseDown = useCallback((e: React.MouseEvent) => {
    e.preventDefault();
    setIsDragging(true);
    setShowWidthTooltip(true);
    
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  }, []);
  
  const handleMouseMove = useCallback((e: MouseEvent) => {
    if (isDragging && sidebarRef.current) {
      const newWidth = e.clientX - sidebarRef.current.getBoundingClientRect().left;
      const windowWidth = window.innerWidth;
      
      // Add constraints to maintain usability - minimum 10%, maximum 30% of window width
      if (newWidth >= windowWidth * 0.1 && newWidth <= windowWidth * 0.3) {
        setSidebarWidth(newWidth);
      }
    }
  }, [isDragging]);
  
  const handleMouseUp = useCallback(() => {
    setIsDragging(false);
    setShowWidthTooltip(false);
    
    document.removeEventListener('mousemove', handleMouseMove);
    document.removeEventListener('mouseup', handleMouseUp);
  }, [handleMouseMove]);

  // Cleanup event listeners
  useEffect(() => {
    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [handleMouseMove, handleMouseUp]);

  return (
    <main className="flex min-h-screen flex-col bg-color-bg-1 text-color-10">
      {/* Include the animation styles */}
      <style jsx global>{`
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        @keyframes slideUp {
          from { transform: translateY(20px); opacity: 0; }
          to { transform: translateY(0); opacity: 1; }
        }
        
        .animate-fadeIn {
          animation: fadeIn 0.3s ease-out forwards;
        }
        
        .animate-slideUp {
          animation: slideUp 0.4s ease-out forwards;
        }
        
        /* Resize styles */
        .resize-handle:hover .resize-line {
          background-color: rgba(255, 255, 255, 0.6);
        }
        
        .resizing .resize-handle {
          background-color: rgba(255, 255, 255, 0.1);
        }
        
        .resizing .resize-line {
          background-color: rgba(255, 255, 255, 0.8);
        }
        
        /* Grid history styles */
        .grid-history {
          border-right: 1px solid rgba(255, 255, 255, 0.1);
          background-color: rgba(0, 0, 0, 0.2);
          backdrop-filter: blur(8px);
        }
      `}</style>

      {/* Navigation Bar with Glassmorphism */}
      <header className="sticky top-0 z-50 backdrop-blur-md bg-black/30 border-b border-white/10 shadow-md">
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between h-16">
            {/* Logo and Brand */}
            <div className="flex items-center">
              <Link href="/" className="flex items-center space-x-2">
                <div className="w-8 h-8 rounded-full bg-gradient-to-r from-[#3CCBA0] to-[#3B82F6] flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-5 h-5 text-white">
                    <path d="M11.25 5.337c0-.355-.186-.676-.401-.959a1.647 1.647 0 01-.349-1.003c0-1.036 1.007-1.875 2.25-1.875S15 2.34 15 3.375c0 .369-.128.713-.349 1.003-.215.283-.401.604-.401.959 0 .332.278.598.61.578 1.91-.114 3.79-.342 5.632-.676a.75.75 0 01.878.645 49.17 49.17 0 01.376 5.452.657.657 0 01-.66.664c-.354 0-.675-.186-.958-.401a1.647 1.647 0 00-1.003-.349c-1.035 0-1.875 1.007-1.875 2.25s.84 2.25 1.875 2.25c.369 0 .713-.128 1.003-.349.283-.215.604-.401.959-.401.31 0 .557.262.534.571a48.774 48.774 0 01-.595 4.845.75.75 0 01-.61.61c-1.82.317-3.673.533-5.555.642a.58.58 0 01-.611-.581c0-.355.186-.676.401-.959.221-.29.349-.634.349-1.003 0-1.035-1.007-1.875-2.25-1.875s-2.25.84-2.25 1.875c0 .369.128.713.349.283.215.604.401.959.401a.641.641 0 01-.658.643 49.118 49.118 0 01-4.708-.36.75.75 0 01-.645-.878c.293-1.614.504-3.257.629-4.924A.53.53 0 005.337 15c-.355 0-.676.186-.959.401-.29.221-.634.349-1.003.349-1.036 0-1.875-1.007-1.875-2.25s.84-2.25 1.875-2.25c.369 0 .713.128 1.003.349.283.215.604.401.959.401a.656.656 0 00.659-.663 47.703 47.703 0 00-.31-4.82.75.75 0 01.83-.832c1.343.155 2.703.254 4.077.294a.64.64 0 00.657-.642z" />
                  </svg>
                </div>
                <span className="text-lg font-bold bg-clip-text text-transparent bg-gradient-to-r from-white via-gray-100 to-gray-300">
                  GameVault
                </span>
              </Link>
            </div>
            
            {/* Desktop Navigation Links */}
            <nav className="hidden md:flex space-x-1">
              {['Discover', 'Popular', 'Categories', 'Wishlist'].map((item) => (
                <Link
                  key={item}
                  href={`/${item.toLowerCase()}`}
                  className="px-4 py-2 text-sm font-medium text-white/80 hover:text-white rounded-full hover:bg-white/5 transition-all duration-200 interactive-element"
                >
                  {item}
                </Link>
              ))}
            </nav>
            
            {/* Right Section: Search & Profile */}
            <div className="flex items-center space-x-4">
              {/* Search Button */}
              <button 
                className="glass-effect p-2 rounded-full hover:bg-white/15 transition-colors interactive-element"
                aria-label="Search"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white/90" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </button>
              
              {/* Profile Button */}
              <div className="relative">
                <button 
                  className="glass-effect rounded-full w-8 h-8 flex items-center justify-center hover:bg-white/15 transition-colors interactive-element"
                  aria-label="Profile"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white/90" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                </button>
              </div>
              
              {/* Theme Toggle */}
              <ThemeToggle />
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto w-full px-4 py-6">
        {/* Hero/Title Area with glassmorphism - Now Collapsible */}
        <div className="relative mb-10 overflow-hidden rounded-2xl">
          {/* Toggle button for hero expansion */}
          <button 
            onClick={() => setHeroExpanded(!heroExpanded)}
            className="absolute top-4 right-4 z-20 p-2 rounded-full backdrop-blur-md bg-black/30 text-white/70 hover:text-white hover:bg-black/40 transition-colors"
            aria-label={heroExpanded ? "Collapse header" : "Expand header"}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              {heroExpanded ? (
                <path fillRule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clipRule="evenodd" />
              ) : (
                <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
              )}
            </svg>
          </button>
          
          {/* Background gradient effect */}
          <div className="absolute inset-0 bg-gradient-to-r from-[#1E293B]/80 to-[#0F172A]/80"></div>
          
          {/* Subtle grid pattern overlay */}
          <div className="absolute inset-0 bg-[url('/grid-pattern.svg')] bg-center opacity-10"></div>
          
          {/* Content container - toggle height based on expanded state */}
          <div className={`relative z-10 px-6 flex flex-col items-start max-w-3xl transition-all duration-500 ease-in-out ${
            heroExpanded ? 'py-12 md:py-16 lg:py-20' : 'py-4 md:py-5'
          }`}>
            <h1 className={`text-3xl md:text-4xl lg:text-5xl font-bold tracking-tight transition-all duration-500 ${
              heroExpanded ? 'mb-4' : 'mb-0'
            }`}>
              <span className="bg-clip-text text-transparent bg-gradient-to-r from-white via-gray-100 to-gray-300">
                Discover Your Next Gaming Adventure
              </span>
            </h1>
            
            {/* Description and buttons - only show when expanded */}
            {heroExpanded && (
              <>
                <p className="text-lg text-white/80 mb-8 max-w-2xl">
                  Personalized game recommendations based on your preferences. Like or dislike games to help us understand your taste.
                </p>
                
                <div className="flex flex-wrap gap-3">
                  <button className="px-5 py-2.5 rounded-full bg-gradient-to-r from-[#3CCBA0] to-[#4CAF50] text-white font-medium hover:shadow-lg hover:shadow-[#4CAF50]/20 transition-all duration-200 interactive-element">
                    Get Started
                  </button>
                  <button className="px-5 py-2.5 rounded-full glass-effect text-white font-medium hover:bg-white/15 transition-all duration-200 interactive-element">
                    How It Works
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
        
        {/* Feedback Message - Enhanced with glassmorphism */}
        {feedbackMessage && feedbackMessage.message && (
          <div className="glass-card p-4 mb-6 relative overflow-hidden">
            <div className="flex items-center">
              <div className="mr-4 flex-shrink-0">
                {feedbackMessage.type === 'success' ? (
                  <div className="w-10 h-10 rounded-full bg-gradient-to-r from-[#3CCBA0]/20 to-[#4CAF50]/20 flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-[#4CAF50]" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                  </div>
                ) : (
                  <div className="w-10 h-10 rounded-full bg-gradient-to-r from-[#F87171]/20 to-[#E57373]/20 flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-[#E57373]" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </div>
              <div className="flex-1">
                <p className="text-white font-medium">{feedbackMessage.message}</p>
              </div>
              <button
                onClick={() => setFeedbackMessage({ message: '', type: '' })}
                className="ml-4 text-white/60 hover:text-white/90 transition-colors focus:outline-none"
                aria-label="Dismiss message"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                </svg>
              </button>
            </div>
            {/* Gradient line at bottom */}
            <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-[#3CCBA0]/0 via-[#3CCBA0]/70 to-[#3CCBA0]/0"></div>
          </div>
        )}

        {/* Main Content Area */}
        <div className={`flex flex-col md:flex-row gap-0 transition-all duration-500 ${preferencesFullscreen ? 'relative' : ''} ${isDragging ? 'resizing' : ''}`}>
          {/* User Preferences Side Panel - Enhanced with glassmorphism, now with collapsible, fullscreen modes and resizable width */}
          <div 
            ref={sidebarRef}
            style={{ 
              width: historyExpanded ? `${sidebarWidth}px` : 'auto',
              maxWidth: preferencesFullscreen ? 'none' : '100%'
            }}
            className={`transition-all duration-500 ease-in-out relative ${
              preferencesFullscreen 
                ? 'fixed inset-0 z-50 p-4 pt-20 bg-black/80 backdrop-blur-lg overflow-auto animate-fadeIn'
                : historyExpanded 
                  ? 'w-full md:w-auto flex-shrink-0 grid-history' 
                  : 'lg:max-w-[180px] w-full flex-shrink-0 grid-history'
            }`}
          >
            <div className={`glass-card p-6 ${
              preferencesFullscreen ? 'max-w-4xl mx-auto animate-slideUp' : 'sticky top-24'
            }`}>
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-white flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white/80" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M9 4.804A7.968 7.968 0 005.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 015.5 14c1.669 0 3.218.51 4.5 1.385A7.962 7.962 0 0114.5 14c1.255 0 2.443.29 3.5.804v-10A7.968 7.968 0 0014.5 4c-1.255 0-2.443.29-3.5.804V12a1 1 0 11-2 0V4.804z" />
                  </svg>
                  Game History
                </h2>
                <div className="flex space-x-2">
                  {/* Collapse/Expand history button */}
                  <button
                    onClick={() => setHistoryExpanded(!historyExpanded)}
                    className="p-2 rounded-full backdrop-blur-md bg-black/30 text-white/70 hover:text-white hover:bg-black/40 transition-colors"
                    aria-label={historyExpanded ? "Collapse history" : "Expand history"}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      {historyExpanded ? (
                        <path fillRule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clipRule="evenodd" />
                      ) : (
                        <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                      )}
                    </svg>
                  </button>
                  
                  {/* Toggle fullscreen button - only show when expanded */}
                  {historyExpanded && (
                    <button
                      onClick={() => setPreferencesFullscreen(!preferencesFullscreen)}
                      className="p-2 rounded-full backdrop-blur-md bg-black/30 text-white/70 hover:text-white hover:bg-black/40 transition-colors"
                      aria-label={preferencesFullscreen ? "Exit fullscreen" : "View fullscreen"}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        {preferencesFullscreen ? (
                          <path fillRule="evenodd" d="M5 9V7a2 2 0 012-2h2V3H7a4 4 0 00-4 4v2h2zm10-2V3h-2v2h2zm-8 12v-2H5v-2H3v2a4 4 0 004 4h2v-2H7a2 2 0 01-2-2zm12-6h-2v2h-2v2h2a2 2 0 002-2v-2zm-4 6v2h2a2 2 0 002-2v-2h-2v2h-2z" clipRule="evenodd" />
                        ) : (
                          <path fillRule="evenodd" d="M3 4a1 1 0 011-1h4a1 1 0 010 2H6.414l2.293 2.293a1 1 0 01-1.414 1.414L5 6.414V8a1 1 0 01-2 0V4zm9 1a1 1 0 010-2h4a1 1 0 011 1v4a1 1 0 01-2 0V6.414l-2.293-2.293a1 1 0 111.414-1.414L15 13.586V12a1 1 0 011-1z" clipRule="evenodd" />
                        )}
                      </svg>
                    </button>
                  )}
                  
                  {/* Common clear button if data exists and history is expanded */}
                  {historyExpanded && (likedGames.length > 0 || dislikedGames.length > 0) && (
                    <button
                      onClick={handleResetHistory}
                      className="text-xs text-white/70 hover:text-white py-1 px-2.5 rounded-full bg-white/10 hover:bg-white/15 transition-colors"
                    >
                      Clear All
                    </button>
                  )}
                </div>
              </div>
              
              {/* Content section that can be collapsed */}
              <div className={`space-y-6 transition-all duration-500 ease-in-out overflow-hidden ${
                historyExpanded ? 'max-h-[2000px] opacity-100' : 'max-h-0 opacity-0'
              }`}>
                {/* Liked Games Section with toggleable expansion */}
                <div className="bg-white/5 backdrop-blur-sm rounded-lg overflow-hidden">
                  <div 
                    className="flex items-center justify-between p-4 cursor-pointer hover:bg-white/5 transition-colors"
                    onClick={() => setLikedGamesExpanded(!likedGamesExpanded)}
                  >
                    <h3 className="font-semibold text-lg text-[#4CAF50]">
                      <span className="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                          <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                        </svg>
                        Liked Games 
                        <span className="ml-2 text-sm text-white/60">({likedGames.length})</span>
                      </span>
                    </h3>
                    <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 text-white/60 transition-transform duration-300 ${likedGamesExpanded ? 'rotate-180' : ''}`} viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </div>
                  
                  {/* Collapsible content */}
                  <div className={`transition-all duration-500 ease-in-out overflow-hidden ${
                    likedGamesExpanded ? 'max-h-[500px] opacity-100' : 'max-h-0 opacity-0'
                  }`}>
                    <div className="px-4 pb-4">
                      {likedGames.length === 0 ? (
                        <div className="bg-white/5 backdrop-blur-sm rounded-lg p-4 text-sm text-white/60 text-center">
                          No liked games yet. Start exploring!
                        </div>
                      ) : (
                        <div className={`space-y-3 ${
                          preferencesFullscreen ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 space-y-0' : 'max-h-[320px] overflow-y-auto custom-scrollbar pr-2'
                        }`}>
                          {likedGames.map((game) => (
                            <div key={game.id} className="group relative flex items-center rounded-lg bg-white/5 hover:bg-white/10 transition-colors duration-200 backdrop-blur-sm border border-white/5 overflow-hidden">
                              <div className="flex-shrink-0 w-16 h-16 relative">
                                <Image
                                  src={game.imageUrl}
                                  alt={game.name}
                                  width={64}
                                  height={64}
                                  className="object-cover w-full h-full"
                                />
                              </div>
                              <div className="flex-1 min-w-0 px-3 py-2">
                                <h4 className="text-sm font-medium text-white truncate">{game.name}</h4>
                                <p className="text-xs text-white/60 truncate">{game.developers}</p>
                              </div>
                              <button
                                onClick={() => handleRemoveFromLiked(game)}
                                className="opacity-0 group-hover:opacity-100 transition-opacity absolute right-2 top-2 text-white/40 hover:text-white/90 focus:text-white/90 focus:outline-none"
                                aria-label="Remove from liked games"
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                  <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                                </svg>
                              </button>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
                
                {/* Disliked Games Section with toggleable expansion */}
                <div className="bg-white/5 backdrop-blur-sm rounded-lg overflow-hidden">
                  <div 
                    className="flex items-center justify-between p-4 cursor-pointer hover:bg-white/5 transition-colors"
                    onClick={() => setDislikedGamesExpanded(!dislikedGamesExpanded)}
                  >
                    <h3 className="font-semibold text-lg text-[#E57373]">
                      <span className="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                          <path d="M18 9.5a1.5 1.5 0 11-3 0v-6a1.5 1.5 0 013 0v6zM14 9.667v-5.43a2 2 0 00-1.105-1.79l-.05-.025A4 4 0 0011.055 2H5.64a2 2 0 00-1.962 1.608l-1.2 6A2 2 0 004.44 12H8v4a2 2 0 002 2 1 1 0 001-1v-.667a4 4 0 01.8-2.4l1.4-1.866a4 4 0 00.8-2.4z" />
                        </svg>
                        Disliked Games
                        <span className="ml-2 text-sm text-white/60">({dislikedGames.length})</span>
                      </span>
                    </h3>
                    <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 text-white/60 transition-transform duration-300 ${dislikedGamesExpanded ? 'rotate-180' : ''}`} viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </div>
                  
                  {/* Collapsible content */}
                  <div className={`transition-all duration-500 ease-in-out overflow-hidden ${
                    dislikedGamesExpanded ? 'max-h-[500px] opacity-100' : 'max-h-0 opacity-0'
                  }`}>
                    <div className="px-4 pb-4">
                      {dislikedGames.length === 0 ? (
                        <div className="bg-white/5 backdrop-blur-sm rounded-lg p-4 text-sm text-white/60 text-center">
                          No disliked games yet.
                        </div>
                      ) : (
                        <div className={`space-y-3 ${
                          preferencesFullscreen ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 space-y-0' : 'max-h-[320px] overflow-y-auto custom-scrollbar pr-2'
                        }`}>
                          {dislikedGames.map((game) => (
                            <div key={game.id} className="group relative flex items-center rounded-lg bg-white/5 hover:bg-white/10 transition-colors duration-200 backdrop-blur-sm border border-white/5 overflow-hidden">
                              <div className="flex-shrink-0 w-16 h-16 relative">
                                <Image
                                  src={game.imageUrl}
                                  alt={game.name}
                                  width={64}
                                  height={64}
                                  className="object-cover w-full h-full"
                                />
                              </div>
                              <div className="flex-1 min-w-0 px-3 py-2">
                                <h4 className="text-sm font-medium text-white truncate">{game.name}</h4>
                                <p className="text-xs text-white/60 truncate">{game.developers}</p>
                              </div>
                              <button
                                onClick={() => handleRemoveFromDisliked(game)}
                                className="opacity-0 group-hover:opacity-100 transition-opacity absolute right-2 top-2 text-white/40 hover:text-white/90 focus:text-white/90 focus:outline-none"
                                aria-label="Remove from disliked games"
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                  <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                                </svg>
                              </button>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Display collapsed hint when history is collapsed */}
                {!historyExpanded && (
                  <div className="text-center text-white/60 text-sm py-2">
                    {likedGames.length + dislikedGames.length} games in history
                    {(likedGames.length > 0 || dislikedGames.length > 0) && (
                      <button
                        onClick={handleResetHistory}
                        className="block mx-auto mt-2 text-xs text-white/70 hover:text-white py-1 px-2.5 rounded-full bg-white/10 hover:bg-white/15 transition-colors"
                      >
                        Clear All
                      </button>
                    )}
                  </div>
                )}
              </div>
            </div>

            {/* Resize handle - only visible when history is expanded and not in fullscreen */}
            {historyExpanded && !preferencesFullscreen && (
              <div 
                className="absolute top-0 right-0 w-4 h-full cursor-ew-resize z-10 resize-handle"
                onMouseDown={handleMouseDown}
                title="Drag to resize"
              >
                <div className="absolute top-1/2 right-1.5 transform -translate-y-1/2 h-24 flex flex-col items-center justify-center gap-1.5">
                  <div className="w-0.5 h-3 bg-white/30 resize-line rounded-full transition-colors"></div>
                  <div className="w-0.5 h-3 bg-white/30 resize-line rounded-full transition-colors"></div>
                  <div className="w-0.5 h-3 bg-white/30 resize-line rounded-full transition-colors"></div>
                </div>
                
                {/* Width tooltip */}
                {showWidthTooltip && (
                  <div className="absolute bottom-4 right-5 bg-black/80 text-white text-xs py-1 px-2 rounded-md backdrop-blur-sm">
                    {Math.round((sidebarWidth / window.innerWidth) * 100)}%
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Game Grid Section - Will be larger when history is collapsed */}
          <div 
            className={`flex-grow transition-all duration-500 ease-in-out ${
              preferencesFullscreen 
                ? 'hidden' 
                : 'pl-4'
            }`}
          >
            {/* Discovery heading - only visible when history is collapsed */}
            {!historyExpanded && (
              <div className="mb-6">
                <h2 className="text-2xl md:text-3xl font-bold text-white">
                  <span className="bg-clip-text text-transparent bg-gradient-to-r from-white via-gray-100 to-gray-300">
                    Game Discovery
                  </span>
                </h2>
                <p className="text-white/60 mt-2">Find your next gaming adventure from our personalized recommendations</p>
              </div>
            )}
            
            {/* Refresh and Filter Row */}
            <div className="flex justify-center items-center mb-6">
              <button
                onClick={fetchRandomGames}
                disabled={refreshing}
                className={`px-6 py-2.5 bg-color-2 hover:bg-color-3 text-color-10 rounded-lg flex items-center gap-2 transition-colors shadow-sm ${refreshing ? 'opacity-70 cursor-not-allowed' : ''}`}
              >
                {refreshing ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Refreshing...
                  </>
                ) : (
                  <>
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 1-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clipRule="evenodd" />
                    </svg>
                    New Recommendations
                  </>
                )}
              </button>
            </div>

            {/* Game Grid - larger grid when history is collapsed */}
            {loading ? (
              <div className="grid gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 place-items-center">
                {Array(6).fill(0).map((_, index) => (
                  <div 
                    key={index} 
                    className="w-full aspect-[16/9] rounded-xl bg-white/5 animate-pulse"
                  ></div>
                ))}
              </div>
            ) : games.length === 0 ? (
              <div className="glass-card p-8 text-center">
                <h3 className="text-xl font-semibold mb-2">No games found</h3>
                <p className="text-white/60 mb-4">
                  Try refreshing to see more recommendations or adjust your preferences.
                </p>
                <button
                  onClick={fetchRandomGames}
                  className="px-6 py-2.5 bg-color-2 hover:bg-color-3 text-color-10 rounded-lg flex items-center gap-2 transition-colors shadow-sm mx-auto"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 1-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clipRule="evenodd" />
                  </svg>
                  Show Random Games
                </button>
              </div>
            ) : (
              <div className="grid gap-8 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3">
                {games.map((game, index) => (
                  <div key={game.id} className={`product-card group card-appear transition-all duration-500 ${
                    !historyExpanded ? 'transform-gpu scale-110' : ''
                  }`}>
                    {/* Image container with advanced overlay effects - Main focus */}
                    <div className="product-card-image">
                      <Image 
                        src={game.imageUrl} 
                        alt={game.name} 
                        width={640} 
                        height={360}
                        className={`w-full h-full object-cover transition-all duration-700 will-change-transform group-hover:scale-110`}
                      />
                      
                      {/* Subtle gradient overlay - always visible */}
                      <div className="absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent opacity-60 transition-opacity duration-300 group-hover:opacity-0"></div>
                      
                      {/* Price badge - always visible */}
                      <div className="absolute top-3 right-3 z-10">
                        <span className="backdrop-blur-md bg-black/40 border border-white/30 text-white text-sm font-medium px-3 py-1.5 rounded-full shadow-lg">
                          {game.price === 0 ? 'Free' : `$${game.price.toFixed(2)}`}
                        </span>
                      </div>
                      
                      {/* New Release badge - top left - Always visible */}
                      {isNewRelease(game.release_date) && (
                        <div className="absolute top-3 left-3 z-10">
                          <span className="backdrop-blur-md bg-gradient-to-r from-[#FF4D4D] to-[#F9CB28] text-white text-xs font-semibold px-3 py-1.5 rounded-full shadow-lg flex items-center gap-1">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-3 h-3">
                              <path d="M15.98 1.804a1 1 0 00-1.96 0l-.24 1.192a1 1 0 01-.784.785l-1.192.238a1 1 0 000 1.962l1.192.238a1 1 0 01.785.785l.238 1.192a1 1 0 001.962 0l.238-1.192a1 1 0 01.785-.785l1.192-.238a1 1 0 000-1.962l-1.192-.238a1 1 0 01-.785-.785l-.238-1.192zM6.949 5.684a1 1 0 00-1.898 0l-.683 2.051a1 1 0 01-.633.633l-2.051.683a1 1 0 000 1.898l2.051.684a1 1 0 01.633.632l.683 2.051a1 1 0 001.898 0l.683-2.051a1 1 0 01.633-.633l2.051-.683a1 1 0 000-1.898l-2.051-.683a1 1 0 01-.633-.633L6.95 5.684z" />
                            </svg>
                            New
                          </span>
                        </div>
                      )}
                      
                      {/* Improved hover overlay with better spacing and content fitting */}
                      <div className="absolute inset-0 backdrop-blur-sm bg-black/40 opacity-0 group-hover:opacity-100 transition-all duration-300 flex flex-col p-4 overflow-hidden">
                        {/* Add a subtle gradient overlay for better text readability */}
                        <div className="absolute inset-0 bg-gradient-to-b from-black/70 via-black/30 to-black/60 pointer-events-none"></div>
                        
                        {/* Game title and developer */}
                        <div className="mb-2 relative z-10">
                          <h3 className="font-bold text-lg text-white line-clamp-1">
                            {game.name}
                          </h3>
                          <p className="text-xs text-white/80 font-medium line-clamp-1">{game.developers}</p>
                        </div>
                        
                        {/* Genre tags */}
                        {game.genres && (
                          <div className="flex flex-wrap gap-1 mb-2 relative z-10">
                            {game.genres.split(',').slice(0, 2).map((genre, idx) => (
                              <span key={idx} className="text-xs px-2 py-0.5 rounded-full bg-white/15 text-white/90">
                                {genre.trim()}
                              </span>
                            ))}
                          </div>
                        )}
                        
                        {/* Game description - shorter to fit better */}
                        <p className="text-white/90 text-xs line-clamp-2 mb-2 relative z-10">
                          {game.short_description}
                        </p>
                        
                        {/* Spacer to push buttons to bottom */}
                        <div className="flex-grow"></div>
                        
                        {/* Action Buttons with improved design */}
                        <div className="flex justify-between gap-2 relative z-10">
                          <button
                            onClick={() => handleLike(game)}
                            disabled={actionLoading[game.id]}
                            className="flex-1 py-1.5 rounded-full flex justify-center items-center gap-1 bg-gradient-to-r from-[#3CCBA0] to-[#4CAF50] text-white shadow-lg hover:shadow-[#4CAF50]/20 hover:shadow-xl transition-all duration-200 card-button"
                            aria-label="Like this game"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                              <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                            </svg>
                            <span className="font-semibold text-sm">Like</span>
                          </button>
                          
                          <button
                            onClick={() => handleDislike(game)}
                            disabled={actionLoading[game.id]}
                            className="flex-1 py-1.5 rounded-full flex justify-center items-center gap-1 bg-gradient-to-r from-[#F87171] to-[#E57373] text-white shadow-lg hover:shadow-[#E57373]/20 hover:shadow-xl transition-all duration-200 card-button"
                            aria-label="Dislike this game"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                              <path d="M18 9.5a1.5 1.5 0 11-3 0v-6a1.5 1.5 0 013 0v6zM14 9.667v-5.43a2 2 0 00-1.105-1.79l-.05-.025A4 4 0 0011.055 2H5.64a2 2 0 00-1.962 1.608l-1.2 6A2 2 0 004.44 12H8v4a2 2 0 002 2 1 1 0 001-1v-.667a4 4 0 01.8-2.4l1.4-1.866a4 4 0 00.8-2.4z" />
                            </svg>
                            <span className="font-semibold text-sm">Dislike</span>
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Footer with Glassmorphism */}
      <footer className="mt-auto backdrop-blur-md bg-black/30 border-t border-white/10">
        <div className="max-w-7xl mx-auto px-4 py-12">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            {/* Logo and description */}
            <div className="md:col-span-1">
              <Link href="/" className="flex items-center space-x-2 mb-4">
                <div className="w-8 h-8 rounded-full bg-gradient-to-r from-[#3CCBA0] to-[#3B82F6] flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-5 h-5 text-white">
                    <path d="M11.25 5.337c0-.355-.186-.676-.401-.959a1.647 1.647 0 01-.349-1.003c0-1.036 1.007-1.875 2.25-1.875S15 2.34 15 3.375c0 .369-.128.713-.349 1.003-.215.283-.401.604-.401.959 0 .332.278.598.61.578 1.91-.114 3.79-.342 5.632-.676a.75.75 0 01.878.645 49.17 49.17 0 01.376 5.452.657.657 0 01-.66.664c-.354 0-.675-.186-.958-.401a1.647 1.647 0 00-1.003-.349c-1.035 0-1.875 1.007-1.875 2.25s.84 2.25 1.875 2.25c.369 0 .713-.128 1.003-.349.283-.215.604-.401.959-.401.31 0 .557.262.534.571a48.774 48.774 0 01-.595 4.845.75.75 0 01-.61.61c-1.82.317-3.673.533-5.555.642a.58.58 0 01-.611-.581c0-.355.186-.676.401-.959.221-.29.349-.634.349-1.003 0-1.035-1.007-1.875-2.25-1.875s-2.25.84-2.25 1.875c0 .369.128.713.349.283.215.604.401.959.401a.641.641 0 01-.658.643 49.118 49.118 0 01-4.708-.36.75.75 0 01-.645-.878c.293-1.614.504-3.257.629-4.924A.53.53 0 005.337 15c-.355 0-.676.186-.959.401-.29.221-.634.349-1.003.349-1.036 0-1.875-1.007-1.875-2.25s.84-2.25 1.875-2.25c.369 0 .713.128 1.003.349.283.215.604.401.959.401a.656.656 0 00.659-.663 47.703 47.703 0 00-.31-4.82.75.75 0 01.83-.832c1.343.155 2.703.254 4.077.294a.64.64 0 00.657-.642z" />
                  </svg>
                </div>
                <span className="text-lg font-bold bg-clip-text text-transparent bg-gradient-to-r from-white via-gray-100 to-gray-300">
                  GameVault
                </span>
              </Link>
              <p className="text-white/60 text-sm mb-6">
                Your personal gaming discovery platform. Find your next favorite game with our AI-powered recommendation system.
              </p>
              <div className="flex space-x-4">
                <a href="#" className="text-white/60 hover:text-white transition-colors" aria-label="Twitter">
                  <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path>
                  </svg>
                </a>
                <a href="https://github.com" className="text-white/60 hover:text-white transition-colors" aria-label="GitHub">
                  <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.244 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" />
                  </svg>
                </a>
                <a href="#" className="text-white/60 hover:text-white transition-colors" aria-label="Discord">
                  <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M20.317 4.3698a19.7913 19.7913 0 00-4.8851-1.5152.0741.0741 0 00-.0785.0371c-.211.3753-.4447.8648-.6083 1.2495-1.8447-.2762-3.68-.2762-5.4868 0-.1636-.3933-.4058-.8742-.6177-1.2495a.077.077 0 00-.0785-.037 19.7363 19.7363 0 00-4.8852 1.515.0699.0699 0 00-.0321.0277C.5334 9.0458-.319 13.5799.0992 18.0578a.0824.0824 0 00.0312.0561c2.0528 1.5076 4.0413 2.4228 5.9929 3.0294a.0777.0777 0 00.0842-.0276c.4616-.6304.8731-1.2952 1.226-1.9942a.076.076 0 00.0842.0286c1.961-.6067 3.9495-1.5219 6.0023-3.0294a.077.077 0 00.0313-.0552c.5004-5.177-.8382-9.6739-3.5485-13.6604a.061.061 0 00-.0312-.0286zM8.02 15.3312c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.955-2.4189 2.1569-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.946 2.4189-2.1568 2.4189zm7.9748 0c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.955-2.4189 2.1569-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.946 2.4189-2.1568 2.4189Z"></path>
                  </svg>
                </a>
              </div>
              
              {/* Navigation Links */}
              <div className="md:col-span-3 grid grid-cols-2 md:grid-cols-3 gap-8">
                <div>
                  <h3 className="text-white font-semibold mb-4">Navigation</h3>
                  <ul className="space-y-2">
                    {['Home', 'Discover', 'Popular', 'Categories', 'Wishlist'].map((item) => (
                      <li key={item}>
                        <Link 
                          href={`/${item.toLowerCase() === 'home' ? '' : item.toLowerCase()}`}
                          className="text-white/60 hover:text-white transition-colors text-sm"
                        >
                          {item}
                        </Link>
                      </li>
                    ))}
                  </ul>
                </div>
                
                <div>
                  <h3 className="text-white font-semibold mb-4">Resources</h3>
                  <ul className="space-y-2">
                    {['About', 'Blog', 'Support', 'Developers', 'Privacy Policy'].map((item) => (
                      <li key={item}>
                        <Link 
                          href={`/${item.toLowerCase().replace(' ', '-')}`}
                          className="text-white/60 hover:text-white transition-colors text-sm"
                        >
                          {item}
                        </Link>
                      </li>
                    ))}
                  </ul>
                </div>
                
                <div>
                  <h3 className="text-white font-semibold mb-4">Contact</h3>
                  <ul className="space-y-2">
                    <li className="flex items-start space-x-2">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white/60 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                      </svg>
                      <span className="text-white/60 text-sm">contact@gamevault.com</span>
                    </li>
                    <li className="flex items-start space-x-2">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white/60 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                      <span className="text-white/60 text-sm">123 Gaming Street, Digital City</span>
                    </li>
                  </ul>
                  
                  <div className="mt-6">
                    <h3 className="text-white font-semibold mb-3">Join our newsletter</h3>
                    <div className="flex">
                      <input 
                        type="email" 
                        placeholder="Your email" 
                        className="glass-effect py-2 px-3 rounded-l-lg w-full text-sm placeholder:text-white/40 focus:outline-none" 
                      />
                      <button className="bg-gradient-to-r from-[#3CCBA0] to-[#4CAF50] text-white py-2 px-4 rounded-r-lg text-sm font-medium">
                        Subscribe
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Copyright */}
            <div className="mt-10 pt-6 border-t border-white/10 flex flex-col md:flex-row justify-between items-center">
              <p className="text-white/40 text-sm">
                © {new Date().getFullYear()} GameVault. All rights reserved.
              </p>
              <div className="mt-4 md:mt-0">
                <ul className="flex space-x-6">
                  <li>
                    <Link href="/terms" className="text-white/40 hover:text-white/70 text-xs">
                      Terms of Service
                    </Link>
                  </li>
                  <li>
                    <Link href="/privacy" className="text-white/40 hover:text-white/70 text-xs">
                      Privacy Policy
                    </Link>
                  </li>
                  <li>
                    <Link href="/cookies" className="text-white/40 hover:text-white/70 text-xs">
                      Cookie Policy
                    </Link>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </footer>
    </main>
  );
}
